/*
===============================================================================
 Name        : TFT.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

// TODO: insert other include files here

// TODO: insert other definitions and declarations here
#include "UTFT.h"
#include "DefaultFonts.h"
extern fontdatatype SmallFont[1144];
int sin[]={135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120,135,150,164,178,191,202,212,221,229,234,238,240,240,238,234,229,221,212,202,191,178,164,150,135,120,105,90,76,62,49,38,28,19,11,6,2,0,0,2,6,11,19,28,38,49,62,76,90,105,120};
int sin2[]={154,157,166,173,182,183,204,213,225,213,219,214,226,212,220,229,199,203,209,186,187,164,165,137,136,133,121,99,81,75,71,73,60,46,50,36,36,40,42,51,57,48,58,63,82,104,108,123,113,142,132,143,154,165,187,202,212,199,222,212,234,217,223,233,211,223,214,199,187,193,185,170,145,136,130,120,108,100,91,68,76,53,70,50,44,50,51,40,41,46,66,64,68,77,76,87,97,111,136,145,155,157,161,172,193,184,191,204,207,220,214,216,218,218,214,211,222,212,207,182,178,176,146,149,136,131,119,102,96,73,81,78,50,49,38,43,49,54,56,43,55,68,51,71,82,96,97,116,123,136,131,158,174,167,194,187,208,220,228,220,220,224,219,218,223,204,212,209,201,177,186,167,143,143,120,121,122,103,95,77,67,71,68,42,40,33,49,42,35,36,55,64,69,60,85,84,97,123,123,127,141,144,174,182,177,202,202,205,203,231,217,211,221,229,230,203,198,204,188,182,187,179,164,151,137,131,102,90,101,92,71,58,70,47,44,56,48,52,38,61,53,70,76,86,73,99,100,106,124,136,159,151,157,176,193,190,209,210,211,209,225,236,230,233,219,212,210,197,189,197,170,166,164,151,121,127,103,100,86,93,76,69,68,43,49,55,51,56,58,35,61,44,52,62,69,95,92,120,136,140,146,157,172,187,187,206,204,205,229,211,215,211,219,226,222,222,220,208,189,190,187,180,154,159,145,120,119,108,89,79,58,58,66,57,62,54,55,32,54,43,54,72,69,75,92,93,92,117,110,137,145,161,163,163,185,206,197,199,222,207,215,216,219,224,209,203,208,199,192,199,183,171,155,146,144,121,120,107,91,83,77,76,72,47,38,54,31,56,36,44,52,56,69,80,76,97,104,124,114,147};
int sin3[]={125,134,134,135,136,144,147,149,145,153,155,162,164,160,162,168,167,175,176,177,182,180,182,183,191,193,197,197,200,203,200,199,200,204,202,205,207,208,208,209,213,214,217,215,210,213,210,214,216,216,211,216,214,218,219,211,216,207,214,208,206,209,209,210,204,205,205,203,199,202,195,191,193,188,187,188,183,186,184,181,174,171,172,171,166,165,160,154,157,154,149,144,141,143,134,132,129,132,129,125,126,124,114,111,114,107,107,107,104,97,98,94,85,88,87,86,80,74,70,75,66,68,61,59,63,56,57,58,53,57,50,49,48,49,49,41,42,43,44,44,34,34,42,34,36,34,35,37,39,39,33,33,39,34,33,37,42,39,38,37,41,40,38,47,47,45,53,44,47,51,55,61,62,62,63,62,68,67,67,73,75,73,76,81,87,87,89,92,99,102,101,103,106,106,111,112,119,122,120,128,129,128,134,137,139,142,142,143,154,150,160,159,163,165,168,171,176,178,178,182,179,180,183,188,189,192,192,190,193,194,199,200,204,207,204,208,206,207,209,211,216,210,213,212,216,210,214,215,219,212,218,210,215,216,216,217,213,215,210,213,209,206,210,202,201,203,198,199,199,199,199,199,191,189,193,183,187,184,182,174,173,172,168,164,167,163,161,156,158,152,150,148,140,144,136,132,134,131,130,129,127,121,114,115,115,112,106,104,97,92,99,88,93,86,83,79,82,81,78,77,70,71,69,62,66,57,61,58,49,54,49,46,45,42,50,44,45,44,38,38,41,34,35,39,40,35,36,35,39,38,32,33,32,31,40,38,38,34,35,39,45,38,42,45,49,42,45,52,50,52,51,56,55,63,66,64,68,66,65,70,78,73,75,80,83,88,90,88,97,93,103,104,103,108,108,118,113,121,125,120};
int sin4[]={123,126,128,131,134,137,140,142,145,148,150,153,156,158,161,163,166,168,171,173,175,177,180,182,184,186,188,189,191,193,194,196,197,199,200,201,203,204,205,206,206,207,208,208,209,209,210,210,210,210,210,210,210,209,209,208,208,207,206,206,205,204,203,201,200,199,197,196,194,193,191,189,188,186,184,182,180,177,175,173,171,168,166,163,161,158,156,153,150,148,145,142,140,137,134,131,128,126,123,120,117,114,112,109,106,103,100,98,95,92,90,87,84,82,79,77,74,72,69,67,65,63,60,58,56,54,52,51,49,47,46,44,43,41,40,39,37,36,35,34,34,33,32,32,31,31,30,30,30,30,30,30,30,31,31,32,32,33,34,34,35,36,37,39,40,41,43,44,46,47,49,51,52,54,56,58,60,63,65,67,69,72,74,77,79,82,84,87,90,92,95,98,100,103,106,109,112,114,117,120,123,126,128,131,134,137,140,142,145,148,150,153,156,158,161,163,166,168,171,173,175,177,180,182,184,186,188,189,191,193,194,196,197,199,200,201,203,204,205,206,206,207,208,208,209,209,210,210,210,210,210,210,210,209,209,208,208,207,206,206,205,204,203,201,200,199,197,196,194,193,191,189,188,186,184,182,180,177,175,173,171,168,166,163,161,158,156,153,150,148,145,142,140,137,134,131,128,126,123,120,117,114,112,109,106,103,100,98,95,92,90,87,84,82,79,77,74,72,69,67,65,63,60,58,56,54,52,51,49,47,46,44,43,41,40,39,37,36,35,34,34,33,32,32,31,31,30,30,30,30,30,30,30,31,31,32,32,33,34,34,35,36,37,39,40,41,43,44,46,47,49,51,52,54,56,58,60,63,65,67,69,72,74,77,79,82,84,87,90,92,95,98,100,103,106,109,112,114,117,120};


const unsigned short icon2[0x400] ={
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0010 (16)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0020 (32)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE71C, 0xB5B6, 0x94B2, 0x8C71,   // 0x0030 (48)
0x9492, 0xA534, 0xD6BA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0040 (64)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x9CF3, 0x73AE, 0x6B6D, 0x73AE, 0x7BCF,   // 0x0050 (80)
0x7BEF, 0x7BCF, 0x7BEF, 0xA534, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0060 (96)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x7BCF, 0x6B6D, 0x738E, 0x7BCF, 0x8C71, 0x9492,   // 0x0070 (112)
0x9492, 0x9492, 0x9492, 0x8C51, 0x8C71, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0080 (128)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x738E, 0x738E, 0x73AE, 0x6B4D, 0x8410, 0x9CF3, 0x9CF3,   // 0x0090 (144)
0x9CF3, 0x9CF3, 0x9CF3, 0x9CF3, 0x94B2, 0x7BEF, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00A0 (160)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x738E, 0x7BEF, 0x8410, 0x632C, 0x4A69, 0x9492, 0xAD75, 0xAD55,   // 0x00B0 (176)
0xAD55, 0xAD55, 0xAD55, 0xA534, 0xAD55, 0x9492, 0x8430, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00C0 (192)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x7BCF, 0x8430, 0x7BCF, 0x6B4D, 0x528A, 0x6B6D, 0xB5B6, 0xB5B6, 0xB5B6,   // 0x00D0 (208)
0xB5B6, 0xB596, 0xB596, 0xAD75, 0xAD75, 0xAD55, 0x8410, 0xB5B6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00E0 (224)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0x7BEF, 0x9CD3, 0xA514, 0x5AEB, 0x630C, 0x6B4D, 0x9492, 0xC638, 0xC618, 0xC618,   // 0x00F0 (240)
0xBDF7, 0xBDF7, 0xC618, 0xB5B6, 0xB5B6, 0xB596, 0x9492, 0x8C51, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0100 (256)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x8C71, 0x94B2, 0xAD55, 0xB5B6, 0x738E, 0x6B4D, 0x632C, 0xB596, 0xD69A, 0xCE59, 0xCE59,   // 0x0110 (272)
0xCE79, 0xCE59, 0x6B6D, 0x9492, 0xB5B6, 0xBDF7, 0x9CF3, 0x8430, 0xD69A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0120 (288)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB5B6, 0x8C51, 0xAD55, 0xB5B6, 0xCE79, 0x8C51, 0x630C, 0x8C51, 0xCE79, 0xD6BA, 0xD69A, 0xDEDB,   // 0x0130 (304)
0xBDD7, 0x8C51, 0x4228, 0x2965, 0xAD55, 0xC638, 0xA534, 0x8430, 0xB5B6, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0140 (320)
0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x8C51, 0xA514, 0xB5B6, 0xC618, 0xD6BA, 0xB5B6, 0xB596, 0xE71C, 0xDEFB, 0xDEFB, 0xE71C, 0xAD55,   // 0x0150 (336)
0x738E, 0x7BEF, 0x5AEB, 0x2945, 0xC638, 0xCE59, 0xA534, 0x9492, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0160 (352)
0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x94B2, 0xB5B6, 0xC618, 0xCE79, 0xD6BA, 0xE73C, 0xEF7D, 0xE73C, 0xEF5D, 0xE73C, 0x9CF3, 0x738E,   // 0x0170 (368)
0x7BCF, 0x8430, 0x6B6D, 0x2965, 0xB596, 0xD69A, 0xAD55, 0x94B2, 0x9CD3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0180 (384)
0xFFFF, 0xFFFF, 0xF79E, 0x9492, 0x9CF3, 0xB5B6, 0xD69A, 0xDEFB, 0xE71C, 0xE73C, 0x6B6D, 0x528A, 0xDEDB, 0xEF5D, 0x7BEF, 0x8430,   // 0x0190 (400)
0x7BEF, 0x8C51, 0x7BCF, 0x2104, 0xB596, 0xD6BA, 0xAD55, 0x9CD3, 0x9CF3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0xE6FC,   // 0x01A0 (416)
0xFFDF, 0xFFFF, 0xCE59, 0x9492, 0x9492, 0x6B4D, 0x7BCF, 0xBDD7, 0xF7BE, 0xA514, 0x4A49, 0x528A, 0xC638, 0xEF7D, 0x7BEF, 0x7BEF,   // 0x01B0 (432)
0x7BEF, 0x8430, 0x5AEB, 0x10A2, 0xC618, 0xD69A, 0xAD55, 0x94B2, 0xA514, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE5A, 0x8BF2,   // 0x01C0 (448)
0xFFFF, 0xFFFF, 0xAD55, 0x94B2, 0x8C51, 0x5AEB, 0x632C, 0xBDD7, 0xE73C, 0x630C, 0x632C, 0xBDF7, 0xFFDF, 0xEF5D, 0xBDD7, 0xB5B6,   // 0x01D0 (464)
0xAD75, 0xAD75, 0x8C51, 0x738E, 0xD69A, 0xCE59, 0xB596, 0x8C51, 0xB5B6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xCE39, 0x7350,   // 0x01E0 (480)
0xFFFF, 0xF79E, 0x94B2, 0x94B2, 0x7BCF, 0x5AEB, 0x738E, 0xD6BA, 0xD69A, 0x2104, 0x6B6D, 0xF79E, 0xF79E, 0xF79E, 0xF7BE, 0xF79E,   // 0x01F0 (496)
0xEF7D, 0xEF5D, 0xE73C, 0xE73C, 0xDEFB, 0xBDF7, 0xBDF7, 0x7BEF, 0xD69A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAD36, 0x7350,   // 0x0200 (512)
0xFFFF, 0xDEDB, 0x8C51, 0x94B2, 0x738E, 0x632C, 0x73AE, 0xCE79, 0xF7BE, 0x7BEF, 0xA514, 0xF7BE, 0xF79E, 0xEF7D, 0xEF7D, 0xEF5D,   // 0x0210 (528)
0xE73C, 0xE71C, 0xDEFB, 0xDEDB, 0xDEDB, 0xBDD7, 0xBDF7, 0x73AE, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x9C75, 0x736F,   // 0x0220 (544)
0xFFFF, 0xCE59, 0x8430, 0x94B2, 0x6B4D, 0x6B4D, 0xB596, 0xE73C, 0xEF7D, 0xFFFF, 0xFFFF, 0xF7BE, 0xF79E, 0xEF7D, 0xEF7D, 0xEF5D,   // 0x0230 (560)
0xE73C, 0xE73C, 0xDEFB, 0xDEFB, 0xD6BA, 0xC618, 0xAD55, 0x8C71, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0x6AEF, 0x9492,   // 0x0240 (576)
0xFFFF, 0xBDF7, 0x8430, 0x8C71, 0x6B6D, 0xB596, 0xE71C, 0xE73C, 0xEF5D, 0xE73C, 0xBDF7, 0xCE59, 0xF7BE, 0xEF7D, 0xEF7D, 0xEF5D,   // 0x0250 (592)
0xE73C, 0xE71C, 0xDEFB, 0xDEFB, 0xC638, 0xD69A, 0x8410, 0xC618, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0x9474, 0x6B0E, 0xCE59,   // 0x0260 (608)
0xFFFF, 0xB5B6, 0x8410, 0x9492, 0xBDD7, 0xD6BA, 0xD6BA, 0xE71C, 0xE73C, 0x8C71, 0x6B4D, 0xA514, 0xF7BE, 0xEF5D, 0xEF5D, 0xE73C,   // 0x0270 (624)
0xE73C, 0xE71C, 0xDEFB, 0xDEDB, 0xCE59, 0xC618, 0x7BCF, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC5F9, 0x7B51, 0x7BEF, 0xFFFF,   // 0x0280 (640)
0xFFFF, 0xB596, 0x8C71, 0xAD75, 0xBDF7, 0xCE59, 0xD69A, 0xE71C, 0xCE79, 0x8410, 0x8410, 0x9CD3, 0xEF5D, 0xEF5D, 0xE73C, 0xE73C,   // 0x0290 (656)
0xE71C, 0xDEFB, 0xDEFB, 0xCE59, 0xDEDB, 0x8C71, 0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEBB, 0x83B2, 0x630C, 0xE73C, 0xFFFF,   // 0x02A0 (672)
0xFFFF, 0xB5B6, 0x9492, 0xAD55, 0xBDD7, 0xC638, 0xCE79, 0xDEFB, 0xB596, 0x73AE, 0x8410, 0x8410, 0xDEDB, 0xE73C, 0xE71C, 0xE71C,   // 0x02B0 (688)
0xDEFB, 0xDEFB, 0xD6BA, 0xCE59, 0xC618, 0x738E, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDC, 0x8C14, 0x5ACC, 0xC658, 0xFFFF, 0xFFFF,   // 0x02C0 (704)
0xFFFF, 0xC638, 0x8C51, 0xA534, 0xB5B6, 0xBDF7, 0xCE59, 0xD6BA, 0x94B2, 0x738E, 0x8410, 0x8430, 0xCE59, 0xE73C, 0xDEFB, 0xDEFB,   // 0x02D0 (720)
0xDEDB, 0xDEFB, 0xBDF7, 0xDEDB, 0x73AE, 0xC618, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDC, 0x8BD2, 0x5ACC, 0xBDD6, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02E0 (736)
0xFFFF, 0xDEDB, 0x8C51, 0xA514, 0xAD75, 0xBDD7, 0xC638, 0xC618, 0x73AE, 0x7BCF, 0x8410, 0x5ACB, 0x8C51, 0xE73C, 0xDEDB, 0xD6BA,   // 0x02F0 (752)
0xDEFB, 0xBDD7, 0xD69A, 0x8C71, 0x8C51, 0xFFFF, 0xFFFF, 0xFFDE, 0xCE5A, 0x7B71, 0x62ED, 0xBDF7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0300 (768)
0xFFFF, 0xF7BE, 0x94B2, 0x94B2, 0xA534, 0xB596, 0xBDF7, 0xB596, 0x6B6D, 0x4208, 0x2945, 0x18C3, 0x6B6D, 0xDEFB, 0xD69A, 0xDEDB,   // 0x0310 (784)
0xB5B6, 0xC618, 0x9CF3, 0x6B4D, 0xFFDE, 0xFFFF, 0xEF5D, 0xAD37, 0x62EE, 0x6B4D, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0320 (800)
0xFFDF, 0xFFFF, 0xBDF7, 0x8C51, 0xA514, 0xAD55, 0xB596, 0xBDD7, 0xA514, 0x738E, 0xA514, 0xB5B6, 0xCE59, 0xD69A, 0xDEDB, 0xB596,   // 0x0330 (816)
0xBDF7, 0xA534, 0x6B4C, 0xEF5D, 0xF79E, 0xBDB8, 0x7370, 0x5AAC, 0x8C71, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0340 (832)
0xFFFF, 0xFFFF, 0xF79E, 0x94B2, 0x94B2, 0xA534, 0xAD55, 0xB5B6, 0xA534, 0xBDD7, 0xD69A, 0xCE59, 0xCE79, 0xCE59, 0xA534, 0x8430,   // 0x0350 (848)
0x738E, 0x3186, 0x7BB0, 0x8C33, 0x7370, 0x62ED, 0x8410, 0xCE59, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0360 (864)
0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x8C71, 0x9CD3, 0xAD55, 0xB596, 0xBDD7, 0xBDD7, 0xBDF7, 0xC618, 0xB5B6, 0xA534, 0xA534, 0x632C,   // 0x0370 (880)
0x6B6D, 0xB5B6, 0xAD76, 0xAD76, 0xBE17, 0xE71B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0380 (896)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x94B2, 0x8C51, 0x94B2, 0xA534, 0xAD55, 0xAD55, 0x9CD3, 0x8C71, 0x73AE, 0x632C, 0xA534,   // 0x0390 (912)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03A0 (928)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xCE59, 0xA514, 0x8430, 0x7BCF, 0x738E, 0x73AE, 0x8410, 0xA534, 0xEF7D, 0xFFFF,   // 0x03B0 (944)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03C0 (960)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xE73C, 0xE71C, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03D0 (976)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03E0 (992)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFFF, 0xFFFF,   // 0x03F0 (1008)
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0400 (1024)
};


int main(void) {
//	setFont(SmallFont);
	SystemCoreClockUpdate();

    Board_Init();
    // Set the LED to the state of "On"

    volatile static int i = 0 ;
    volatile static int j = 0;
    volatile static long int debounce = 0;
    volatile static int p_ant = 0;
    volatile static int p = 0;
    volatile static int new = 0;
    volatile static int bloq = 0;

    // Enter an infinite loop, just incrementing a counter
    InitLCD(LANDSCAPE);

    //drawPixel(20,20);
    setFont(SmallFont);
    Chip_GPIO_WritePortBit(LPC_GPIO,0,22,true);
    while(1)
    {
      	setColor2(255,255,255);
    	drawHLine(60,60, 200);
	//drawBitmap (0,0, 32, 32, icon2,8);
	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1){Chip_GPIO_WritePortBit(LPC_GPIO,0,22,false);}

    	clrScr();
    	setColor2(255,255,255);
    	for (i=1;i<400;i++)
    	    drawPixel(i,sin[i]);
    	print("senoidal 1",20,20,0);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	clrScr();
    	setColor2(255,255,255);
    	for (i=1;i<400;i++)
    	drawPixel(i,sin3[i]);
    	print("senoidal 2",20,20,0);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	clrScr();
    	setColor2(255,255,255);
    	for (i=1;i<400;i++)
    	drawPixel(i,sin4[i]);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	print("senoidal 3",20,20,0);
    	clrScr();

    	setColor2(255,0,0);
    	for (i=1;i<400;i++)
    	drawPixel(i,sin[i]);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	print("senoidal 4",20,20,0);
    	clrScr();
    	setColor2(0,255,0);
    	for (i=1;i<400;i++)
    	drawPixel(i,sin[i]);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	print("senoidal 5",20,20,0);
    	clrScr();
    	for(i=1;i<50;i++)
    	drawPixel(i,150);
    	for(i=50;i<100;i++)
    	drawPixel(i,90);
    	for(i=100;i<150;i++)
    	drawPixel(i,150);
    	for(i=150;i<200;i++)
    	drawPixel(i,90);
    	for(i=200;i<250;i++)
    	drawPixel(i,150);
    	for(i=250;i<300;i++)
    	drawPixel(i,90);
    	for(i=300;i<350;i++)
    	drawPixel(i,150);
    	for(i=350;i<400;i++)
    	drawPixel(i,90);
    	print("cuadrada 1",20,20,0);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	clrScr();
    	setColor2(255,255,255);
    	for (i=1;i<400;i++)
    	drawPixel(i,sin2[i]);
    	print("senoidal 6",20,20,0);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	clrScr();
    	for(i=1;i<200;i++)
    	drawPixel(i,200);
    	for(i=200;i<400;i++)
    	drawPixel(i,60);
    	print("cuadrada 2",20,20,0);
    	while (Chip_GPIO_GetPinState(LPC_GPIO,2,10)==1);
    	clrScr();

    };

//    //    	clrScr();
//    //    	print("texto1texto1texto1",100,20,0);
//    //    	clrScr();
//    //    	print("texto1texto1texto1",100,120,0);
//    //    	clrScr();
//    //    	print("texto1texto1texto1",100,220,0);

//    while(1)
//    {
//    	clrScr();
//    	print("texto1texto1texto1",100,20,0);
//    	clrScr();
//    	print("texto1texto1texto1",100,120,0);
//
//
////    	    	if(Chip_GPIO_GetPinState(LPC_GPIO,2,10)==0)
////    	{
////    		debounce++;
////    		if (debounce==10 && bloq==0)
////    		{
////    			p++;
////    			debounce=0;
////    			new=1;
////    			bloq=1;
////    			if (p==3)
////    			{
////    				p=0;
////    			}
////    		}
////    	}
////    	else
////    	{
////    		bloq=0;
////    		debounce=0;
////    	}
////
////    	if (new==1)
////    	{
////    		new=0;
////    		clrScr();
////    		if (p==0)
////    		{
////    			print("texto1texto1texto1",100,100,0);
////    		}
////    		if (p==1)
////    		{
////    		print("texto2texto2texto2texto2",100,200,0);
////    		}
////    		if (p==2)
////    		{
////    		print("texto3texto3texto3texto3texto3",100,300,0);
////    		}
//
//    	//}
//
//   }
    return 0 ;
}
